# Tip: you can reload (when running): $ tmux source .tmux.conf
set-option -g default-command "reattach-to-user-namespace -l bash"

if-shell 'test $(tput colors) -ge 256' 'set-option -g default-terminal "screen-256color"'

#set-option -g default-command /bin/bash
set-option -g default-shell /bin/bash
if-shell 'test -n "$tmux_shell"' 'set-option -g default-command $tmux_shell' 'set-option -g default-shell $tmux_shell'

set-window-option -g mode-keys vi
# smart pane switching with awareness of vim splits
#bind -n C-h run "tmux select-pane -L"
#bind -n C-j run "tmux select-pane -D"
#bind -n C-k run "tmux select-pane -U"
#bind -n C-l run "tmux select-pane -R"
# This doesn't quite work.  It's only by the magic of iTerm2 that seemless vim/tmux integration happens
# Would like to generalise it so that it works for Linux/remote sessions too.
# This is a kind of approach, but really I think it'd need to peer into vims before/after status
# I wonder how iTerm2 does it...
bind -n C-h run "(tmux display-message -p #{pane_current_command} | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p #{pane_current_command} | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p #{pane_current_command} | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p #{pane_current_command} | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
#bind -n C-\ run "(tmux display-message -p #{pane_current_command} | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# Some of these options were inspired by: http://zanshin.net/2013/09/05/my-tmux-configuration/ 
bind H resize-pane -L 5
bind J resize-pane -D 5
bind K resize-pane -U 5
bind L resize-pane -R 5

# reload ~/.tmux.conf using PREFIX r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# use PREFIX | to split window horizontally and PREFIX - to split vertically
bind | split-window -h
bind - split-window -v

# Make the current window the first window
bind T swap-window -t 1

# v/y for 'visual' -> 'copy' (rather than space and enter)
# Note, to engage copy mode <C-b,[>, to paste <C-b,]>
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'y' copy-selection
bind -t vi-copy C-V rectangle-toggle 
# Can't quite get to work: http://superuser.com/questions/728284/tmux-select-entire-lines
#bind-key V send-keys "0v\$"
# Remember it's not "C-b, p" it's "C-b, C-p"
bind C-p run "tmux set-buffer \"\$(xclip -o)\"; tmux paste-buffer"
bind C-y run "tmux save-buffer - | xclip -i"

# useful one liner for colours: $ for i in {0..255} ; do printf "\x1b[38;5;${i}mcolour${i}\n"; done
# pane-active-border-bg colour0
# pane-border-bg colour17

set -g status-bg colour234
set -g status-fg colour230
set -g status-left-bg colour237
set -g status-left-length 70
set -g status-left '#[bg=colour123]#[fg=colour19]#h#[bg=default] - #[fg=colour213]#S'
set -g status-right "#(batt -t)"

