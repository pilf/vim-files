#!/bin/bash

places="$HOME/.g.places"

function home_shorten {
    sed -e "s|$HOME|~|"
}

function display_known_locations {
    echo --
    cat $places | sort | home_shorten | awk 'BEGIN{FS=":"}{printf "%-15s %s\n", $1, $2}' 
}

function display_known_locations_path {
    cat $places \
        | awk 'BEGIN{FS=":"}{printf "%s:%s\n", $2, $1}' \
        | sort -f \
        | home_shorten \
        | awk 'BEGIN{FS=":"}{printf "%-15s %s\n", $2, $1}' 
}

function usage {
    cat <<EOF
output location
    $ g shortname

create new location (ommiting path assumes .)
    $ g -c [path] shortname

display known locations (sorted by shortname)
    $ g

display known locations (sorted by path)
    $ g -p

alternative sort syntax
    $ g -s (name|path) 

help
    $ g -?
EOF
}

while getopts ":cs:p?" opt; do
    case $opt in
        c)
            create_mode=$OPTARG
            ;;
        p)
            sort_mode=path
            ;;
        s)
            sort_mode=$OPTARG
            case $sort_mode in
                path)
                    sort_mode=path
                    ;;
                name|*)
                    sort_mode=name
                    ;;
            esac
            ;;
        ?)
            usage
            exit 0
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            echo --
            usage
            exit 1
            ;;
        # Possible future argument to search the known locations.  Here's an awk fragment that may come in handy:
        # g 2> /dev/null | awk 'BEGIN{FIELDWIDTHS="15 *"}$2 ~ /^~\/tmp/{printf "%-10s %s\n", $1, $2}'
    esac
done

if [ -n "$sort_mode" ] ; then
    display_known_locations_path
    exit 0
fi

shortname=${@: -1}
if [ -z "$1" ] ; then
    echo "No short name given (required)" >&2
    echo --
    display_known_locations
    exit 1
fi

if [ -n "$create_mode" ] && [ "$create_mode" == "$shortname" ]; then
    echo "Path not given assuming '.': $(abspath $create_mode)"
    create_mode='.' 
fi

touch $places
if [ -n "$create_mode" ]; then
    # remove any pre-existing entry
    sed -i.sedbk "/^$shortname:.*/d" $places
    rm $places.sedbk
    echo "$shortname:$(abspath $create_mode)" >>$places
    echo "Successfully added $shortname, known locations now:"
    display_known_locations
    exit 0
fi

place=$(sed -n -e "s/^$shortname:\(.*\)$/\1/p" $places)
if [ -z "$place" ]; then
    echo "Place '$shortname' not found, known locations:"
    display_known_locations
else
    printf "$place"
fi

