#!/bin/bash

places="$HOME/.g.places"

function display_known_locations {
    echo --
    cat $places | sort | sed -e "s|$HOME|~|" | awk 'BEGIN{FS=":"}{printf "%-15s %s\n", $1, $2}' 
}

function usage {
    echo "usage: g [-c [path]] shortname"
}

while getopts ":c:" opt; do
    case $opt in
        c)
            create_mode=$OPTARG
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            usage
            exit 1
            ;;
        # Possible future argument to search the known locations.  Here's an awk fragment that may come in handy:
        # g 2> /dev/null | awk 'BEGIN{FIELDWIDTHS="15 *"}$2 ~ /^~\/tmp/{printf "%-10s %s\n", $1, $2}'
    esac
done

shortname=${@: -1}
if [ -z "$1" ] ; then
    echo "No short name given (required)" >&2
    usage
    display_known_locations
    exit 1
fi

if [ -n "$create_mode" ] && [ "$create_mode" == "$shortname" ]; then
    echo "Path not given assuming '.': $(abspath $create_mode)"
    create_mode='.' 
fi

touch $places
if [ -n "$create_mode" ]; then
    # remove any pre-existing entry
    sed -i.sedbk "/^$shortname:.*/d" $places
    rm $places.sedbk
    echo "$shortname:$(abspath $create_mode)" >>$places
    echo "Successfully added $shortname, known locations now:"
    display_known_locations
    exit 0
fi

place=$(sed -n -e "s/^$shortname:\(.*\)$/\1/p" $places)
if [ -z "$place" ]; then
    echo "Place '$shortname' not found, known locations:"
    display_known_locations
else
    printf "$place"
fi

